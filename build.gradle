buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
	id "com.matthewprenger.cursegradle" version "1.0.10"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'


ext.build_number = System.getenv('BUILD_NUMBER')
if (!build_number) {
	ext.build_number = System.getenv('TRAVIS_BUILD_NUMBER')
}

if (build_number) {
	version = mod_version + '.' + build_number
} else {
	version = mod_version
}

group = mod_group
archivesBaseName = mod_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200225-1.15.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                chestcounter {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                chestcounter {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'chestcounter', '--all', '--output', file('src/generated/resources/')

            mods {
                chestcounter {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.15.2-31.1.18'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "chestcounter",
            "Specification-Vendor": "chestcounter-henne90gen",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"chestcounter-henne90gen",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


ext.keystore = System.getenv("KEYSTORE")
ext.keystorePass = System.getenv("KEYSTORE_PASSWORD")
ext.keyPass = System.getenv("KEY_PASSWORD")
ext.keyAlias = System.getenv("KEY_ALIAS")

task signJar(type: Exec, dependsOn: tasks.findByPath("reobfJar")) {
    onlyIf {
        project.keystore && project.keystorePass && project.keyPass && project.keyAlias
    }

    commandLine "jarsigner", "-keystore", keystore, "-storepass", keystorePass, "-keypass", keyPass,
            "-tsa", "http://timestamp.comodoca.com", "-tsadigestalg", "SHA-512",
//			"-sigalg", "SHA512withECDSA", "-digestalg", "SHA-512",
            jar.archivePath, keyAlias
}

build.dependsOn signJar

ext.curseKey = System.getenv("CURSE_API_KEY")
ext.curseReleaseType = 'release'
ext.curseVersion = version

tasks.curseforge.onlyIf { curseKey }
tasks.curseforge.dependsOn signJar

if (curseKey && hasProperty('curse_id')) {
    curseforge {
        apiKey = curseKey

        project {
            id = curse_id
            changelog = "Changes..."
            releaseType = curseReleaseType
            addGameVersion minecraft.version

            if (hasProperty('curseExtraVersions')) {
                for (version in curseExtraVersions) {
                    addGameVersion version
                }
            }

            mainArtifact(jar) {
                displayName = "$mod_name $curseVersion"
            }
        }
    }
}

task copyToGame(type: Copy, dependsOn: build) {
    // Provide the destination directory like so: -Pdest=/path/to/destination
    def dest = "./run/mods"
    from file("${buildDir}/libs/${archivesBaseName}-${version}.jar")
    into file(dest)
}
